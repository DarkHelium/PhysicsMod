Code "Sonic - Open Zone Changes" by "DarkHelium"
//
  #include "Reflection" noemit

  #lib "Reflection"
  #lib "SonicParameters"
  #lib "Player"
  #lib "INI"
  #lib "MathHelpers"

  using System.IO;

  static bool isLoaded = false;
  static string directory;
//
{
  if (!isLoaded) {
    directory = Path.Combine(Directory.GetCurrentDirectory(), "Mods", "Physics");
    isLoaded = true;
  }

  // Read configuration from config.ini
  var config = INI.Read(Path.Combine(directory, "config.ini"));
  bool isRailMomentumEnabled = bool.Parse(config["openZone"]["railMomentum"]);
  bool isDynamicRunningEnabled = bool.Parse(config["openZone"]["dynamicRunning"]);
  bool isBoostLimited = bool.Parse(config["openZone"]["boostLimit"]);

  var SonicParams = Reflection.GetDataInfo<SonicParameters.Root>("player_common");
  if (SonicParams.pData == null) return;

  // Faster Rail Physics
  if (isRailMomentumEnabled) {
    RFL_SET_PARAM(SonicParams, modePackage.grind.acceleForce, 8f);  // Increased acceleration
    RFL_SET_PARAM(SonicParams, modePackage.grind.deceleForce, 5f);  // Reduced deceleration
    RFL_SET_PARAM(SonicParams, modePackage.grind.limitSpeedMin, 5f); // Lower minimum speed
    RFL_SET_PARAM(SonicParams, modePackage.grind.limitSpeedMax, 50f); // Increased max speed
  }

  // Dynamic Running Physics
  if (isDynamicRunningEnabled) {
    if (Player.Status.IsGrounded()) {
      var kinematics = Player.Kinematics.Get();
      if (kinematics == null) return;

      var currentVelocity = kinematics->Velocity;
      float slopeFactor = Vector3.Dot(Player.Kinematics.GetForward(), Vector3.UnitY);
      float currentSpeed = currentVelocity.Length();
      var direction = currentVelocity.Normalized();

      float slopeMultiplier = 0.02f;
      float desiredSpeed = currentSpeed;

      // Uphill
      if (slopeFactor > 0) {
        desiredSpeed -= currentSpeed * slopeFactor * slopeMultiplier;
      }
      // Downhill
      else if (slopeFactor < 0) {
        desiredSpeed += currentSpeed * -slopeFactor * slopeMultiplier * 2.0f;
      }

      // Clamp speed
      float maxRunSpeed = 40f;
      if (desiredSpeed > maxRunSpeed) desiredSpeed = maxRunSpeed;

      float newSpeed = MathHelpers.Lerp(currentSpeed, desiredSpeed, 0.1f);
      kinematics->Velocity = direction * newSpeed;
    }
  }

  // Limited Boost Time
  if (isBoostLimited) {
    RFL_SET_PARAM(SonicParams, forwardView.modePackage.boost.recoveryRate, 10f); // Slower recovery
    RFL_SET_PARAM(SonicParams, forwardView.modePackage.boost.infinityBoostTime, 60f); // Reduced max boost
  }
}
