Code "Rail Physics Extended" by "DarkHelium"
//
//  #include "Reflection" noemit
//
//  #lib "Reflection"
//  #lib "SonicParameters"
//  #lib "DeltaTime"
//  #lib "GameMode"
//  #lib "Globals"
//  #lib "HMM"
//  #lib "Lua"
//  #lib "MathHelpers"
//  #lib "Memory"
//  #lib "Player"
//  #lib "VectorHelpers"
//
//  using System.IO;

static bool isLoaded = false;
static string directory;
//
{
    // Initialize mod directory
    if (!isLoaded)
    {
        directory = Path.Combine(Directory.GetCurrentDirectory(), "Mods", "Physics");
        isLoaded = true;
    }

    // Fetch Sonic's parameter structure
    var SonicParams = Reflection.GetDataInfo<SonicParameters.Root>("player_common");
    if (SonicParams.pData == null) return;

    // Adjust Rail Momentum (Accel/Decel forces, speed limits)
    RFL_SET_PARAM(SonicParams, modePackage.grind.acceleForce, 6f);   
    RFL_SET_PARAM(SonicParams, modePackage.grind.deceleForce, 4f);   
    RFL_SET_PARAM(SonicParams, modePackage.grind.limitSpeedMin, 2f);
    RFL_SET_PARAM(SonicParams, modePackage.grind.limitSpeedMax, 30f);

    // Optional friction parameter, if supported:
    // RFL_SET_PARAM(SonicParams, modePackage.grind.friction, 0.05f);

    // Momentum-Based Rail Switching
    if (Player.Status.IsGrinding() && Player.Input.IsPressed(Player.InputActionType.PlayerRailSwitch))
    {
        var kinematics = Player.Kinematics.Get();
        if (kinematics == null) return;
        kinematics->Velocity += Player.Kinematics.GetForward() * 0.5f; // Slight push for rail switch
    }

    // Optional slope-based logic (dot product with UnitY to detect incline/decline)
    if (Player.Status.IsGrinding())
    {
        var kinematics = Player.Kinematics.Get();
        if (kinematics == null) return;

        float slopeFactor = Vector3.Dot(Player.Kinematics.GetForward(), Vector3.UnitY);
        float slopeMultiplier = 0.01f;

        var currentVelocity = kinematics->Velocity;
        float currentSpeed = currentVelocity.Length();
        var direction = currentVelocity.Normalized();

        float desiredSpeed = currentSpeed;
        if (slopeFactor > 0)
        {
            // Uphill => slow down more
            desiredSpeed -= currentSpeed * slopeFactor * slopeMultiplier;
        }
        else if (slopeFactor < 0)
        {
            // Downhill => speed up
            desiredSpeed += currentSpeed * -slopeFactor * slopeMultiplier;
        }

        // Smoothly transition speed using MathHelpers.Lerp
        float newSpeed = MathHelpers.Lerp(currentSpeed, desiredSpeed, 0.1f);
        kinematics->Velocity = direction * newSpeed;
    }
}

Code "Sonic - Jump and Gravity Rebalance" by "DarkHelium"
//
//  #include "Reflection" noemit
//
//  #lib "Reflection"
//  #lib "SonicParameters"
//  #lib "DeltaTime"
//  #lib "GameMode"
//  #lib "Globals"
//  #lib "HMM"
//  #lib "Lua"
//  #lib "MathHelpers"
//  #lib "Memory"
//  #lib "Player"
//  #lib "VectorHelpers"
//
//  using System.IO;

static bool isLoaded = false;
static string directory;
//
{
    // Initialize mod directory
    if (!isLoaded)
    {
        directory = Path.Combine(Directory.GetCurrentDirectory(), "Mods", "Physics");
        isLoaded = true;
    }

    // Access Sonic Parameters
    var SonicParams = Reflection.GetDataInfo<SonicParameters.Root>("player_common");
    if (SonicParams.pData == null) return;

    // Adjust jump speed, gravity, and terminal velocity
    RFL_SET_PARAM(SonicParams, modePackage.jump.jumpSpeed, 12.0f);         
    RFL_SET_PARAM(SonicParams, modePackage.jump.gravity, 6.0f);           
    RFL_SET_PARAM(SonicParams, modePackage.jump.terminalVelocity, -30.0f);

    // Momentum-based jump physics on inclines
    if (Player.Status.IsGrounded() && Player.Input.IsPressed(Player.InputActionType.PlayerJump))
    {
        var kinematics = Player.Kinematics.Get();
        if (kinematics == null) return;

        // Example incline property: FloorAngle
        float slopeAngle = kinematics->FloorAngle;
        float inclineFactor = 1.0f + (slopeAngle / 45.0f) * 0.2f;
        kinematics->Velocity.y += 1.0f * inclineFactor; // Boost jump on incline
    }
}

Code "Running Physics" by "DarkHelium"
//
//  #include "Reflection" noemit
//
//  #lib "Reflection"
//  #lib "SonicParameters"
//  #lib "DeltaTime"
//  #lib "GameMode"
//  #lib "Globals"
//  #lib "HMM"
//  #lib "Lua"
//  #lib "MathHelpers"
//  #lib "Memory"
//  #lib "Player"
//  #lib "VectorHelpers"
//
//  using System.IO;

static bool isLoaded = false;
static string directory;
//
{
    // Initialize mod directory
    if (!isLoaded)
    {
        directory = Path.Combine(Directory.GetCurrentDirectory(), "Mods", "CustomPhysicsMod");
        isLoaded = true;
    }

    // Access parameters for Sonic or other characters (e.g. "player_common", "shadow_common", etc.)
    var CharParams = Reflection.GetDataInfo<SonicParameters.Root>("player_common");
    if (CharParams.pData == null) return;

    // Basic run parameters (names may vary by environment)
    RFL_SET_PARAM(CharParams, modePackage.run.runSpeed, 20f);    
    RFL_SET_PARAM(CharParams, modePackage.run.acceleForce, 4f);  
    RFL_SET_PARAM(CharParams, modePackage.run.deceleForce, 2f);  

    // Optional slope-based logic, using Lerp to smoothly adjust speed
    if (Player.Status.IsGrounded())
    {
        var kinematics = Player.Kinematics.Get();
        if (kinematics == null) return;

        var currentVelocity = kinematics->Velocity;
        float currentSpeed = currentVelocity.Length();
        var direction = currentVelocity.Normalized();

        float slopeFactor = Vector3.Dot(Player.Kinematics.GetForward(), Vector3.UnitY);
        float slopeMultiplier = 0.01f;

        float desiredSpeed = currentSpeed;
        if (slopeFactor > 0)  // Uphill
        {
            desiredSpeed -= currentSpeed * slopeFactor * slopeMultiplier;
        }
        else if (slopeFactor < 0)  // Downhill
        {
            desiredSpeed += currentSpeed * -slopeFactor * slopeMultiplier;
        }

        float newSpeed = MathHelpers.Lerp(currentSpeed, desiredSpeed, 0.1f);
        kinematics->Velocity = direction * newSpeed;
    }
}