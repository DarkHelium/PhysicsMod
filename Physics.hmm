Code "Sonic - Universal Changes" by "DarkHelium"
//
  #include "Reflection" noemit
  #lib "Reflection"
  #lib "SonicParameters"
  #lib "Player"
  #lib "INI"
  #lib "MathHelpers"

  using System.IO;

  static bool isLoaded = false;
  static string directory;
//
{
    if (!isLoaded) {
        directory = Path.Combine(Directory.GetCurrentDirectory(), "Mods", "Physics");
        isLoaded = true;
    }

    var config = INI.Read(Path.Combine(directory, "config.ini"));

    // [openZone] booleans
    bool isRailMomentumEnabled   = bool.Parse(config["openZone"]["railMomentum"]);
    bool isDynamicRunningEnabled = bool.Parse(config["openZone"]["dynamicRunning"]);
    bool isBoostLimited          = bool.Parse(config["openZone"]["boostLimit"]);

    // [global] booleans
    bool isMomentumEnabled       = bool.Parse(config["global"]["momentum"]);
    bool isBalancedBoostEnabled  = bool.Parse(config["global"]["balancedBoost"]);

    var SonicParams = Reflection.GetDataInfo<SonicParameters.Root>("player_common");
    if (SonicParams.pData == null) return;

    // Handle dynamic running through parameter modification
    if (isDynamicRunningEnabled) {
        RFL_SET_CONTEXTUAL_PLAYER_PARAM(SonicParams, modePackage.speed.normal.max, 20f);
        RFL_SET_CONTEXTUAL_PLAYER_PARAM(SonicParams, modePackage.speed.normal2.max, 20f);
        RFL_SET_CONTEXTUAL_PLAYER_PARAM(SonicParams, modePackage.speed.boost.initial, 40f);
        RFL_SET_CONTEXTUAL_PLAYER_PARAM(SonicParams, modePackage.speed.boost.min, 30f);
        RFL_SET_CONTEXTUAL_PLAYER_PARAM(SonicParams, modePackage.speed.boost.max, 40f);
    }

    if (isMomentumEnabled) {
        // Ground momentum
        RFL_SET_CONTEXTUAL_PLAYER_PARAM(SonicParams, modePackage.speed.decele.force, 4f);
        RFL_SET_CONTEXTUAL_PLAYER_PARAM(SonicParams, modePackage.speed.decele.force2, 4f);
        RFL_SET_CONTEXTUAL_PLAYER_PARAM(SonicParams, modePackage.fall.overSpeedDeceleForce, 0f);
        
        // Jump momentum
        RFL_SET_CONTEXTUAL_PLAYER_PARAM(SonicParams, modePackage.jumpSpeed.limitUpSpeed, 30f);
        RFL_SET_CONTEXTUAL_PLAYER_PARAM(SonicParams, modePackage.jumpSpeed.deceleForce, 0.5f);
        RFL_SET_CONTEXTUAL_PLAYER_PARAM(SonicParams, modePackage.fall.deceleForce, 0.5f);
        
        // Spin boost momentum
        RFL_SET_CONTEXTUAL_PLAYER_PARAM(SonicParams, spinBoost.speedBoost.decele.force, 4f);
        RFL_SET_CONTEXTUAL_PLAYER_PARAM(SonicParams, spinBoost.speedBoost.decele.force2, 4f);
    }

    if (isRailMomentumEnabled) {
        RFL_SET_CONTEXTUAL_PLAYER_PARAM(SonicParams, modePackage.grind.acceleForce, 4f);
        RFL_SET_CONTEXTUAL_PLAYER_PARAM(SonicParams, modePackage.grind.deceleForce, 3f);
        RFL_SET_CONTEXTUAL_PLAYER_PARAM(SonicParams, modePackage.grind.limitSpeedMin, 5f);
        RFL_SET_CONTEXTUAL_PLAYER_PARAM(SonicParams, modePackage.grind.maxSpeed, 35f);
    }

    if (isBoostLimited) {
        RFL_SET_CONTEXTUAL_PLAYER_PARAM(SonicParams, modePackage.boost.recoveryRate, 15f);
        RFL_SET_CONTEXTUAL_PLAYER_PARAM(SonicParams, modePackage.boost.infinityBoostTime, 180f);
    }

    if (isBalancedBoostEnabled) {
        float consumptionRate = Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateSpinBoost ? 120f : 30f;
        RFL_SET_CONTEXTUAL_PLAYER_PARAM(SonicParams, modePackage.boost.consumptionRate, consumptionRate);
    }
}
